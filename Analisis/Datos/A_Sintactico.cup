/*----------------------1ra Area: Codigo de Usuario ---------------------------------------------*/
//------------->Importaciones, paquetes

package Analisis.Datos;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Logica.Simbolo;
import Logica.Datos.Archivo;
import Logica.Datos.Registro;
import Logica.TipoDato;
import Analisis.TablaError;

//-------------->Codigo para el parser, varibles, metodos

parser code
{:  

    public  Archivo raiz;
    private Registro aux = null;
    private int indexR=0;
    private int tamanioClave=0;
    private Boolean errorSemantico = false;

     public TablaError tablaES = TablaError.getInstance();
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila=s.left;
        int col = s.right;

        System.out.println("!!!!!!Error sintactico recuperado!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);
        
        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }


    //Metodo al que se llama en el momento  en que ya no  es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
        String lexema = s.value.toString();
        int fila = s.right;
        int col = s.left;
        
        System.out.println("!!!!!!Error sintactico, panic mode!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);

        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }
:}

//------------>Codigo para las acciones gramaticales 
action code{:


        public void analizar(Simbolo b, Boolean Reinicio, int linea, int columna) {

            if (Reinicio) {
                indexR = 0;
            }

            if (aux != null) {
                if (indexR < tamanioClave) {
                    Simbolo t1 = aux.get(indexR);
                    if (t1.compararTipo(b) != 0) {
                        //error semantico
                        System.out.println("Error Semantico EL TIPO QUE VIENE NO ES EL QUE SE REQUIERE");
                        System.out.println("t1: " + t1.tipo.name());
                        System.out.println("t2: " + b.tipo.name());
                        String descripcion = "EL tipo de dato no coincide con el tipo de dato pedido";
                        tablaES.setError(b.valor.toString(), linea, columna, "Dato: Semantico", descripcion);
                        errorSemantico = true;
                    }

                } else {
                    //error semantico
                    System.out.println("Error Semantico EL TAMANIO DE EL REGISTRO ES ES MAYOR AL PEDIDO ");

                    String descripcion = "La posicion del dato desborda al registro";
                    tablaES.setError(b.valor.toString(), linea, columna, "Dato: Semantico", descripcion);
                    errorSemantico = true;
                }

            }

            indexR++;

        }


         private void verificarTamanio(int aux, int b, int linea ,int columna) {

            if (b < aux) {
                String descripcion = "ELtamano del registro es menor al definido";
                System.out.println(descripcion);
                tablaES.setError("Registro", linea, columna, "Dato: Semantico ", descripcion);
                errorSemantico = true;

            }
        }

:}

/*----------------------2da Area: Area de Declaraciones ---------------------------------------------*/

//------------------------------------> declaracion de terminales

//simbolos
terminal String coma,igual,corA,corC,llaveA,llaveC;

//palabras reservadas
terminal String PSRegistro,PSClaves;

//Expresiones regualer
terminal String cadena,entero,decimal;



//------------------------------>declaracion de no terminales
//general
non terminal INICIO;
non terminal Archivo CUERPO;
non terminal Registro REGISTRO;
non terminal LinkedList<String> LCADENA;
non terminal LinkedList<Registro>  LREGISTRO;
non terminal Simbolo DATO;

start with INICIO;
/*----------------------3ra Area: Reglas Semanticas ---------------------------------------------*/
INICIO ::= CUERPO:a 
        {:
            if(!errorSemantico){
                System.out.println("error Semantico = false");
                parser.raiz = a;  
            }else{
                System.out.println("error Semantico = true");
            }
                
        :}
		;

CUERPO ::= PSClaves igual corA LCADENA:claves corC   PSRegistro igual corA LREGISTRO:registros corC
            {: 
               RESULT = new Archivo(claves,registros);
            :}
		;

LCADENA ::= LCADENA:a coma cadena:b
        {: 
                RESULT =a;
                RESULT.add(b);
                tamanioClave++;
        :}

		| 	cadena:a
             {: 
                RESULT = new LinkedList<String>();
                RESULT.add(a);
               tamanioClave++;
            :}
		;


LREGISTRO	::= LREGISTRO:a llaveA REGISTRO:b llaveC
            {: 
                verificarTamanio(aux.size(), b.size(), bleft ,bright);
                RESULT =a;
                RESULT.add(b);
            :}
			|	llaveA REGISTRO:a llaveC
            {:
                    RESULT = new LinkedList<Registro>();
                    RESULT.add(a);
                    aux = a;
            :}
			;


REGISTRO ::= REGISTRO:a coma DATO:b	
            {:
                analizar(b,false,bleft, bright);
                RESULT = a;
                RESULT.add(b);
            :}

			|  DATO:a
            {:
                analizar(a,true,aleft, aright);
                RESULT = new Registro();
                RESULT.add(a);
            :}
		;

DATO ::= cadena:a{: RESULT  = new Simbolo(TipoDato.cadena,a); :}
	 |	 decimal:a{:RESULT = new Simbolo(TipoDato.numerico,a);:}
	 |	 entero:a{:RESULT  = new Simbolo(TipoDato.numerico,a);:}
	;