/*----------------------1ra Area: Codigo de Usuario ---------------------------------------------*/
//------------->Importaciones, paquetes

package Analisis.Datos;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Logica.Simbolo;
import Logica.Datos.Archivo;
import Logica.Datos.Registro;
import Logica.TipoDato;
import Analisis.TablaError;

//-------------->Codigo para el parser, varibles, metodos

parser code
{:  

    public Archivo raiz;
    private Registro aux = null;
    private int indexR=0;


     public TablaError tablaES = TablaError.getInstance();
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila=s.right;
        int col = s.left;

        System.out.println("!!!!!!Error sintactico recuperado!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);
        
        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }


    //Metodo al que se llama en el momento  en que ya no  es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
        String lexema = s.value.toString();
        int fila = s.right;
        int col = s.left;
        
        System.out.println("!!!!!!Error sintactico, panic mode!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);

        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }
:}

//------------>Codigo para las acciones gramaticales 
action code{:

:}

/*----------------------2da Area: Area de Declaraciones ---------------------------------------------*/

//------------------------------------> declaracion de terminales

//simbolos
terminal String coma,igual,corA,corC,llaveA,llaveC;

//palabras reservadas
terminal String PSRegistro,PSClaves;

//Expresiones regualer
terminal String cadena,entero,decimal;



//------------------------------>declaracion de no terminales
//general
non terminal INICIO;
non terminal Archivo CUERPO;
non terminal Registro REGISTRO;
non terminal LinkedList<String> LCADENA;
non terminal LinkedList<Registro>  LREGISTRO;
non terminal Simbolo DATO;

start with INICIO;
/*----------------------3ra Area: Reglas Semanticas ---------------------------------------------*/
INICIO ::= CUERPO:a 
        {:
            parser.raiz = a;
        :}
		;

CUERPO ::= PSClaves igual corA LCADENA:claves corC   PSRegistro igual corA LREGISTRO:registros corC
            {: 
               RESULT = new Archivo(claves,registros);
            :}
		;

LCADENA ::= LCADENA:a coma cadena:b
        {: 
                RESULT =a;
                RESULT.add(b);
        :}

		| 	cadena:a
             {: 
                RESULT = new LinkedList<String>();
                RESULT.add(a);
               
            :}
		;


LREGISTRO	::= LREGISTRO:a llaveA REGISTRO:b llaveC
            {: 
               if(aux.size()==a.size()){
                    RESULT =a;
                    RESULT.add(b);
                    System.out.println("");
                }else{
                
                }
                
            :}
			|	llaveA REGISTRO:a llaveC
            {:
            
                    RESULT = new LinkedList<Registro>();
                    RESULT.add(a);
                    aux = a;

            :}
			;


REGISTRO ::= REGISTRO:a coma DATO:b	
            {:
            
                indexR++;
                if(aux!=null){

                    if(indexR<aux.size()){

                        Simbolo  t1 = aux.get(indexR);

                        if(t1.compararTipo(b)==0){
                            RESULT = a; 
                            RESULT.add(b);
                            System.out.println("indexR = "+indexR);
                            System.out.println("aux.size = "+aux.size());

                        }else{
                            //error semantico
                            System.out.println("Error Semantico");
                        }

                    }else{

                        //error semantico
                        System.out.println("Error Semantico");
                    }
                  

                }else{
                    RESULT = a; 
                    RESULT.add(b);
                    System.out.println("Primera ves indexR = "+indexR);
                }

            :}

			|  DATO:a
            {:
        
                indexR=0;
                if(aux!=null){


                    Simbolo  t1 = aux.get(indexR);
                
                    if(t1.compararTipo(a)==0){
                        RESULT = new Registro();
                        RESULT.add(a);
                        System.out.println("indexR = "+indexR);
                    }else{
                        //error semantico
                        System.out.println("Error Semantico");
                    }

                }else{
                    RESULT = new Registro();
                    RESULT.add(a);
                    System.out.println("Primera ves indexR = "+indexR);
                }
   

              
            :}
		;

DATO ::= cadena:a{: RESULT  = new Simbolo(TipoDato.cadena,a); :}
	 |	 decimal:a{:RESULT = new Simbolo(TipoDato.decimal,a);:}
	 |	 entero:a{:RESULT  = new Simbolo(TipoDato.entero,a);:}
	;