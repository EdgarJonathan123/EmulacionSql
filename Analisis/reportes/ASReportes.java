
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.reportes;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Analisis.TablaError;
import Logica.TipoDato;
import Logica.Reportes.Expresion;
import Logica.Reportes.Literal;
import Logica.Reportes.Id;
import Logica.Reportes.Instruccion;
import Logica.Reportes.Funciones.LeerArchivo;
import Logica.Reportes.Declaracion;
import Logica.Reportes.Funcionalidad;
import Logica.OpRel;
import Logica.Reportes.Funciones.Contar;
import Logica.Reportes.Imprimir;
import Logica.Reportes.Imprimir;
import Logica.Reportes.Funciones.Sumar;
import Logica.Reportes.Funciones.Promedio;
import Logica.Reportes.Funciones.ContarSi;
import Logica.Reportes.Funciones.ObtenerSi;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASReportes extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return simReportes.class;
}

  /** Default constructor. */
  @Deprecated
  public ASReportes() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASReportes(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASReportes(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\003\000\002\014" +
    "\005\000\002\014\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\005\006\000\002\011\006\000" +
    "\002\011\010\000\002\011\006\000\002\011\010\000\002" +
    "\011\014\000\002\011\014\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\006\006\000\002\010\016\000\002" +
    "\013\005\000\002\013\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\014\017\006\025\004\026\005\027\014\031" +
    "\007\001\002\000\004\007\124\001\002\000\004\007\111" +
    "\001\002\000\004\035\uffeb\001\002\000\004\035\uffed\001" +
    "\002\000\016\002\000\017\006\025\004\026\005\027\014" +
    "\031\007\001\002\000\004\005\ufffd\001\002\000\004\002" +
    "\106\001\002\000\004\005\105\001\002\000\004\035\uffec" +
    "\001\002\000\004\005\ufffc\001\002\000\004\005\ufffb\001" +
    "\002\000\004\035\020\001\002\000\004\006\021\001\002" +
    "\000\016\020\022\021\026\022\024\023\027\024\023\030" +
    "\030\001\002\000\004\007\100\001\002\000\004\007\067" +
    "\001\002\000\004\007\064\001\002\000\004\005\ufffa\001" +
    "\002\000\004\007\061\001\002\000\004\007\042\001\002" +
    "\000\004\007\031\001\002\000\012\032\033\033\034\034" +
    "\032\035\036\001\002\000\006\004\uffe4\010\uffe4\001\002" +
    "\000\006\004\uffe6\010\uffe6\001\002\000\006\004\uffe3\010" +
    "\uffe3\001\002\000\004\004\037\001\002\000\006\004\uffe5" +
    "\010\uffe5\001\002\000\012\032\033\033\034\034\032\035" +
    "\036\001\002\000\004\010\041\001\002\000\004\005\ufff6" +
    "\001\002\000\012\032\033\033\034\034\032\035\036\001" +
    "\002\000\004\004\044\001\002\000\012\032\033\033\034" +
    "\034\032\035\036\001\002\000\004\004\046\001\002\000" +
    "\016\011\054\012\050\013\052\014\051\015\055\016\047" +
    "\001\002\000\004\004\uffef\001\002\000\004\004\ufff3\001" +
    "\002\000\004\004\ufff0\001\002\000\004\004\ufff1\001\002" +
    "\000\004\004\056\001\002\000\004\004\ufff2\001\002\000" +
    "\004\004\uffee\001\002\000\012\032\033\033\034\034\032" +
    "\035\036\001\002\000\004\010\060\001\002\000\004\005" +
    "\ufff5\001\002\000\012\032\033\033\034\034\032\035\036" +
    "\001\002\000\004\010\063\001\002\000\004\005\ufff9\001" +
    "\002\000\012\032\033\033\034\034\032\035\036\001\002" +
    "\000\004\010\066\001\002\000\004\005\ufff7\001\002\000" +
    "\012\032\033\033\034\034\032\035\036\001\002\000\004" +
    "\004\071\001\002\000\012\032\033\033\034\034\032\035" +
    "\036\001\002\000\004\004\073\001\002\000\016\011\054" +
    "\012\050\013\052\014\051\015\055\016\047\001\002\000" +
    "\004\004\075\001\002\000\012\032\033\033\034\034\032" +
    "\035\036\001\002\000\004\010\077\001\002\000\004\005" +
    "\ufff4\001\002\000\012\032\033\033\034\034\032\035\036" +
    "\001\002\000\004\004\102\001\002\000\012\032\033\033" +
    "\034\034\032\035\036\001\002\000\004\010\104\001\002" +
    "\000\004\005\ufff8\001\002\000\016\002\ufffe\017\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\031\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\005\110\001\002\000\016\002\uffff\017" +
    "\uffff\025\uffff\026\uffff\027\uffff\031\uffff\001\002\000\004" +
    "\032\112\001\002\000\004\004\113\001\002\000\004\032" +
    "\114\001\002\000\004\004\115\001\002\000\004\035\116" +
    "\001\002\000\004\004\117\001\002\000\004\032\120\001" +
    "\002\000\004\004\121\001\002\000\004\032\122\001\002" +
    "\000\004\010\123\001\002\000\004\005\uffe9\001\002\000" +
    "\012\032\033\033\034\034\032\035\036\001\002\000\006" +
    "\004\uffe7\010\uffe7\001\002\000\006\004\127\010\130\001" +
    "\002\000\012\032\033\033\034\034\032\035\036\001\002" +
    "\000\004\005\uffea\001\002\000\006\004\uffe8\010\uffe8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\020\002\011\003\012\005\010\006\014\007" +
    "\016\010\015\014\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\106\005\010\006\014\007\016\010\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\042\001\001\000\002\001\001\000\004\004" +
    "\044\001\001\000\002\001\001\000\004\012\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\067\001\001\000\002" +
    "\001\001\000\004\004\071\001\001\000\002\001\001\000" +
    "\004\012\073\001\001\000\002\001\001\000\004\004\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\100\001\001\000\002\001\001\000\004\004\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\124\013\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\130\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASReportes$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASReportes$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASReportes$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public Funcionalidad raiz;
    
     public TablaError tablaES = TablaError.getInstance();
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila=s.left;
        int col = s.right;

        System.out.println("!!!!!!Error sintactico recuperado!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);
        
        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }


    //Metodo al que se llama en el momento  en que ya no  es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
        String lexema = s.value.toString();
        int fila = s.right;
        int col = s.left;
        
        System.out.println("!!!!!!Error sintactico, panic mode!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);

        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASReportes$actions {






  private final ASReportes parser;

  /** Constructor */
  CUP$ASReportes$actions(ASReportes parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASReportes$do_action_part00000000(
    int                        CUP$ASReportes$act_num,
    java_cup.runtime.lr_parser CUP$ASReportes$parser,
    java.util.Stack            CUP$ASReportes$stack,
    int                        CUP$ASReportes$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASReportes$result;

      /* select the action based on the action number */
      switch (CUP$ASReportes$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		RESULT = start_val;
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASReportes$parser.done_parsing();
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_CUERPO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		
             parser.raiz = new Funcionalidad(a);
        
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_CUERPO ::= LISTA_CUERPO CUERPO ptcoma 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		 
                RESULT = a;
                RESULT.add(b);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("LISTA_CUERPO",10, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_CUERPO ::= CUERPO ptcoma 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		 
                RESULT = new LinkedList<>();
                RESULT.add(a);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("LISTA_CUERPO",10, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 
            RESULT =a;
        
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 
            RESULT = a;
        
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= GRAFICAR 
            {
              Instruccion RESULT =null;
		 
        
        
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= TIPODATO identificador igual FUNCION 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		Expresion fun = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 
                RESULT = new Declaracion(tipo,nombre,fun);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= PSLeerArchivo parA PARAMETRO parC 
            {
              Expresion RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		
                RESULT = new LeerArchivo(ruta,rutaleft,rutaright);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= PSSumar parA PARAMETRO coma PARAMETRO parC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		Expresion cl = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		
                 RESULT = new Sumar(id,clleft,clright,cl);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-5)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= PSContar parA PARAMETRO parC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		
                RESULT = new Contar(id,idleft,idright);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= PSPromedio parA PARAMETRO coma PARAMETRO parC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		Expresion cl = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		
                 RESULT = new Promedio(id,clleft,clright,cl);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-5)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= PSContarsi parA PARAMETRO coma PARAMETRO coma COMPARACION coma PARAMETRO parC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-7)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-7)).value;
		int clave1left = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-5)).left;
		int clave1right = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-5)).right;
		Expresion clave1 = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-5)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).right;
		OpRel rel = (OpRel)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).value;
		int clave2left = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int clave2right = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		Expresion clave2 = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		
                RESULT = new ContarSi(id,clave1,clave2,rel,idleft,idright);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-9)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= PSObtenersi parA PARAMETRO coma PARAMETRO coma COMPARACION coma PARAMETRO parC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-7)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-7)).value;
		int clave1left = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-5)).left;
		int clave1right = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-5)).right;
		Expresion clave1 = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-5)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).right;
		OpRel rel = (OpRel)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)).value;
		int clave2left = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int clave2right = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		Expresion clave2 = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		
                  RESULT = new ObtenerSi(id,clave1,clave2,rel,idleft,idright);
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-9)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMPARACION ::= menorque 
            {
              OpRel RESULT =null;
		 RESULT  = OpRel.menorque; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMPARACION ::= mayorque 
            {
              OpRel RESULT =null;
		 RESULT  = OpRel.mayorque; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMPARACION ::= mayorigual 
            {
              OpRel RESULT =null;
		 RESULT  = OpRel.mayorigual; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMPARACION ::= menorigual 
            {
              OpRel RESULT =null;
		 RESULT  = OpRel.menorigual; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMPARACION ::= dobleigual 
            {
              OpRel RESULT =null;
		 RESULT  = OpRel.dobleigual; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COMPARACION ::= negacion 
            {
              OpRel RESULT =null;
		 RESULT  = OpRel.negacion; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPODATO ::= PSCadena 
            {
              TipoDato RESULT =null;
		 RESULT  = TipoDato.cadena; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPODATO ::= PSNumerico 
            {
              TipoDato RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 RESULT  = TipoDato.numerico; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPODATO ::= PSArchivo 
            {
              TipoDato RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 RESULT  = TipoDato.archivo; 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMPRIMIR ::= PSImprimir parA LISTA_PARAMETROS parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-1)).value;
		
                     RESULT = new Imprimir(a);       
            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GRAFICAR ::= PSGraficar parA cadena coma cadena coma identificador coma cadena coma cadena parC 
            {
              String RESULT =null;
		

            
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("GRAFICAR",6, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-11)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma PARAMETRO 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 
                        RESULT = a;
                        RESULT.add(b);
                    
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.elementAt(CUP$ASReportes$top-2)), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 
                        RESULT = new LinkedList<>();
                        RESULT.add(a);
                    
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETRO ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 RESULT = new Literal(TipoDato.cadena,a); 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("PARAMETRO",2, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETRO ::= identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 RESULT = new Id(a,aleft,aright); 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("PARAMETRO",2, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETRO ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 RESULT = new Literal(TipoDato.numerico,a); 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("PARAMETRO",2, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETRO ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASReportes$stack.peek()).value;
		 RESULT = new Literal(TipoDato.numerico,a); 
              CUP$ASReportes$result = parser.getSymbolFactory().newSymbol("PARAMETRO",2, ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASReportes$stack.peek()), RESULT);
            }
          return CUP$ASReportes$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASReportes$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASReportes$do_action(
    int                        CUP$ASReportes$act_num,
    java_cup.runtime.lr_parser CUP$ASReportes$parser,
    java.util.Stack            CUP$ASReportes$stack,
    int                        CUP$ASReportes$top)
    throws java.lang.Exception
    {
              return CUP$ASReportes$do_action_part00000000(
                               CUP$ASReportes$act_num,
                               CUP$ASReportes$parser,
                               CUP$ASReportes$stack,
                               CUP$ASReportes$top);
    }
}

}
