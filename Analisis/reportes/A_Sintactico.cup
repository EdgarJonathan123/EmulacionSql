/*----------------------1ra Area: Codigo de Usuario ---------------------------------------------*/
//------------->Importaciones, paquetes

package Analisis.reportes;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Analisis.TablaError;
import Logica.TipoDato;
import Logica.Reportes.Expresion;
import Logica.Reportes.Literal;
import Logica.Reportes.Id;
import Logica.Reportes.Instruccion;
import Logica.Reportes.Funciones.LeerArchivo;
import Logica.Reportes.Declaracion;
import Logica.Reportes.Funcionalidad;
import Logica.OpRel;
import Logica.Reportes.Funciones.Contar;
import Logica.Reportes.Imprimir;
import Logica.Reportes.Imprimir;
import Logica.Reportes.Funciones.Sumar;
import Logica.Reportes.Funciones.Promedio;
import Logica.Reportes.Funciones.ContarSi;
import Logica.Reportes.Funciones.ObtenerSi;

//-------------->Codigo para el parser, varibles, metodos

parser code
{:



    public Funcionalidad raiz;
    
     public TablaError tablaES = TablaError.getInstance();
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila=s.left;
        int col = s.right;

        System.out.println("!!!!!!Error sintactico recuperado!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);
        
        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }


    //Metodo al que se llama en el momento  en que ya no  es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
        String lexema = s.value.toString();
        int fila = s.right;
        int col = s.left;
        
        System.out.println("!!!!!!Error sintactico, panic mode!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);

        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }
:}

//------------>Codigo para las acciones gramaticales 
action code{:



:}


/*----------------------2da Area: Area de Declaraciones ---------------------------------------------*/

//------------------------------------> declaracion de terminales

//simbolos
terminal String coma,ptcoma,igual,parA,parC,mayorque;
terminal String menorque,mayorigual,menorigual,negacion;
terminal String dobleigual;


//palabras reservadas
terminal String PSArchivo,PSSumar,PSLeerArchivo,PSContar,PSContarsi;
terminal String PSObtenersi,PSImprimir,PSGraficar;
terminal String PSNumerico,PSPromedio,PSCadena;


//expresiones regulares
terminal String cadena,entero,decimal,identificador;

//------------------------------>declaracion de no terminales
//general
non terminal String INICIO;
non terminal Instruccion CUERPO;
non terminal Expresion PARAMETRO;
non terminal Instruccion DECLARACION;
non terminal Instruccion IMPRIMIR;
non terminal TipoDato TIPODATO;
non terminal String GRAFICAR;
non terminal Expresion FUNCION;
non terminal OpRel COMPARACION;
non terminal LinkedList<Expresion>  LISTA_PARAMETROS;
non terminal LinkedList<Instruccion> LISTA_CUERPO;

 
//------------>precendencia de menor a mayor

start with INICIO
;
/*----------------------3ra Area: Reglas Semanticas ---------------------------------------------*/

INICIO ::= LISTA_CUERPO:a
        {:
             parser.raiz = new Funcionalidad(a);
        :}
        ;


LISTA_CUERPO ::= LISTA_CUERPO:a CUERPO:b ptcoma 
            {: 
                RESULT = a;
                RESULT.add(b);
            :}
            |    CUERPO:a ptcoma
            {: 
                RESULT = new LinkedList<>();
                RESULT.add(a);
            :}            
            ;        

CUERPO ::= DECLARACION:a
        {: 
            RESULT =a;
        :}
        |   IMPRIMIR:a  
        {: 
            RESULT = a;
        :}
        |   GRAFICAR  
        {: 
        
        :}
        ;


DECLARACION ::=  TIPODATO:tipo identificador:nombre igual FUNCION:fun
            {: 
                RESULT = new Declaracion(tipo,nombre,fun);
            :}
            ;


FUNCION     ::= PSLeerArchivo  parA PARAMETRO:ruta parC 
            {:
                RESULT = new LeerArchivo(ruta,rutaleft,rutaright);
            :}
            |   PSSumar parA PARAMETRO:id coma PARAMETRO:cl parC
            {:
                 RESULT = new Sumar(id,clleft,clright,cl);
            :}
            |   PSContar parA PARAMETRO:id parC
            {:
                RESULT = new Contar(id,idleft,idright);
            :}
            |   PSPromedio parA PARAMETRO:id coma PARAMETRO:cl parC
             {:
                 RESULT = new Promedio(id,clleft,clright,cl);
            :}
            |   PSContarsi parA PARAMETRO:id coma  PARAMETRO:clave1 coma COMPARACION:rel coma PARAMETRO:clave2 parC
            {:
                RESULT = new ContarSi(id,clave1,clave2,rel,idleft,idright);
            :}
            |   PSObtenersi parA PARAMETRO:id coma PARAMETRO:clave1 coma COMPARACION:rel coma PARAMETRO:clave2 parC
            {:
                  RESULT = new ObtenerSi(id,clave1,clave2,rel,idleft,idright);
            :}
            ;




COMPARACION ::= menorque{: RESULT  = OpRel.menorque; :}
            |   mayorque{: RESULT  = OpRel.mayorque; :}
            |   mayorigual{: RESULT  = OpRel.mayorigual; :}
            |   menorigual{: RESULT  = OpRel.menorigual; :}
            |   dobleigual{: RESULT  = OpRel.dobleigual; :}
            |   negacion{: RESULT  = OpRel.negacion; :}
            ;

TIPODATO ::=  PSCadena{: RESULT  = TipoDato.cadena; :}
            | PSNumerico:a{: RESULT  = TipoDato.numerico; :}
            | PSArchivo:a{: RESULT  = TipoDato.archivo; :}
            ;


IMPRIMIR ::=  PSImprimir parA LISTA_PARAMETROS:a parC 
            {:
                     RESULT = new Imprimir(a);       
            :}
            ;


GRAFICAR ::=  PSGraficar parA cadena coma cadena coma identificador coma cadena coma cadena  parC 
            {:

            :}
            ;


LISTA_PARAMETROS ::= LISTA_PARAMETROS:a coma PARAMETRO:b
                    {: 
                        RESULT = a;
                        RESULT.add(b);
                    :}
                    | PARAMETRO:a
                    {: 
                        RESULT = new LinkedList<>();
                        RESULT.add(a);
                    :}
                    ;


PARAMETRO ::=   cadena:a{: RESULT = new Literal(TipoDato.cadena,a); :}
            |   identificador:a{: RESULT = new Id(a,aleft,aright); :}
            |   decimal:a{: RESULT = new Literal(TipoDato.numerico,a); :}
            |   entero:a{: RESULT = new Literal(TipoDato.numerico,a); :}
            ;
            
//-------------------------------Definicion de variables ----------------------

